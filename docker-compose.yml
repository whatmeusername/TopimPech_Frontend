version: '3.8'




services:


  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    networks:
      - topimpech_network
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
  
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"

      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${TRAEFIK_DASHBOARD_ACME_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"

      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      - "traefik.http.routers.traefik.service=api@internal"

      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_DASHBOARD_USER}:${TRAEFIK_DASHBOARD_PASSWORD}"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "3000:3000"
    volumes:
      - "./traefik:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  es:
    image: elasticsearch:7.16.1
    volumes:
      - ./elasticsearch_volume:/var/lib/elasticsearch
    environment:
      node.name: "es"
      http.port: 9200
      http.host: 0.0.0.0
      cluster.name: "topimpech"
      discovery.seed_hosts: "es"
      ES_JAVA_OPTS: "-Xmx512m -Xms512m"
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      bootstrap.memory_lock: "true"
      discovery.type: single-node
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - topimpech_network

  db:
    image: postgres:15.3
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=512MB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=128MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=400ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=5000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: ${POSTGRE_DATABASE}
      POSTGRES_USER: ${POSTGRE_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRE_PASSWORD}
      PGUSER: ${POSTGRE_USERNAME}
      PGPASSWORD: ${POSTGRE_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./db/init_database.sql:/docker-entrypoint-initdb.d/init_database.sql
      - ./db/data:/var/lib/postgresql/data
      - ./db/backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRE_DATABASE} -U  ${POSTGRE_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - topimpech_network

  frontend:
    build:
      context: ./frontend
    container_name: topimpech_nextjs_frontend
    networks:
      - topimpech_network
    environment:
      PROXY_URL: http://api:8000/
      SITE_URL: https://topimpech.ru
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`topimpech.ru`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.port=${FRONTEND_PORT}"
    depends_on:
      - api
    healthcheck:
      test: curl --fail http://localhost:${FRONTEND_PORT} || exit 1
      interval: 30s
      timeout: 30s
      retries: 2
      start_period: 30s

  api:
    build:
      context: backend
      dockerfile: dockerfile
    container_name: topimpech_nestjs_backend
    environment:
  
      - POSTGRE_PORT=${POSTGRE_PORT}
      - POSTGRE_USERNAME=${POSTGRE_USERNAME}
      - POSTGRE_PASSWORD=${POSTGRE_PASSWORD}
      - POSTGRE_DATABASE=${POSTGRE_DATABASE}

    depends_on:
      - db
      - es
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    networks:
      - topimpech_network
    healthcheck:
      test: curl --fail http://localhost:${BACKEND_PORT} || exit 1
      interval: 30s
      timeout: 30s
      retries: 2
      start_period: 30s
    


networks:
  topimpech_network: